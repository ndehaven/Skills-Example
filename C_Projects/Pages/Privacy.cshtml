@page
@model PrivacyModel
@{
    ViewData["Title"] = "Privacy Policy";
}

<style>
    .messaging-frame {
        width: 800px;
        height: 400px;
        border: 1px solid #ccc;
        overflow-y: scroll; /* Enable vertical scrollbar */
        padding: 10px;
    }

    .message {
        margin-bottom: 10px;
        
    }

    .user-input {
        width: calc(100% - 20px); /* Width - left and right padding */
        padding: 5px;
        border: 1px solid #ccc;
        margin-top: 10px;
    }

    .send-button {
        margin-top: 10px;
        margin-right: 10px;
        margin-bottom: 10px;
        padding: 5px 10px;
        background-color: #007bff;
        color: #fff;
        border: none;
        cursor: pointer;
    }

    .purge-button {
        margin-top: 10px;
        margin-right: 250px;
        padding: 10px;
        background-color: #dc3545;
        color: #fff;
        border: none;
        cursor: pointer;
    }
</style>

<html>
<body>
    <div class="text-center">
        <h1 class="display-4">Privacy Page</h1>
        <p>Use this page to handle privacy-related tasks</p>

        <!-- Input fields for receiver ID and receive button -->
        <div class="input-group mb-3">
            <span class="input-group-text">Receiver ID</span>
            <input type="text" class="user-input" id="recvID" placeholder="Enter receiver ID">
            <div>
                <label for="purge">Purge</label>
                <input type="checkbox" id="purge" name="purge" class="purge-button">
            </div>
            <button class="send-button" onclick="receiveMsg()">Receive</button>
        </div>

        <!-- Messaging frame -->
        <div class="messaging-frame" id="messageFrame">
            <!-- Messages will be displayed here -->
        </div>
    </div>
</body>
</html>

<script>
    // Script used to calling the service and passing parameters 
    function receiveMsg() {
        var recvID = document.getElementById("recvID").value;
        var purgeCheckbox = document.getElementById("purge");
        var purge = purgeCheckbox.checked; // Purge value 
      
        // Service location url 
        var url = `http://localhost:53062/Service1.svc/ReceiveMsg?recvID=${recvID}&purge=${purge}`;

        fetch(url)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.text(); // Get the XML response as text
            })
            .then(data => {
                // Parse the XML response
                var parser = new DOMParser();
                var xmlDoc = parser.parseFromString(data, "text/xml");

                // Extract message strings from XML
                var messages = [];
                var stringNodes = xmlDoc.getElementsByTagName("string");
                for (var i = 0; i < stringNodes.length; i++) {
                    messages.push(stringNodes[i].textContent);
                }

                // Display messages
                displayMessages(messages);
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
    }
    // ASecond function to help display the messages from the Service 
    function displayMessages(messages) {
        var messageFrame = document.getElementById("messageFrame");
        messageFrame.innerHTML = ""; // Clear previous messages
        messages.forEach(message => {
            var div = document.createElement("div");
            div.className = "message";
            div.textContent = message; // Set text content of the div to the message
            messageFrame.appendChild(div);
        });
    }
</script>